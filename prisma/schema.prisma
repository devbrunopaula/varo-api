// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users    CompanyUser[]
  AuditLog AuditLog[]

  @@index([name])
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?  @unique
  displayName String?
  password    String
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profile      Profile?
  companyId    String?
  employee     Employee?
  invitedToken String?

  companies CompanyUser[]
  AuditLog  AuditLog[]
}

model CompanyUser {
  id        String   @id @default(cuid())
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, userId]) // Ensures the same user can't belong to the same company more than once
}

model Employee {
  id        String @id @default(cuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique
  firstName String
  lastName  String
  email     String
  phone     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  sidebar   Boolean  @default(true)
  theme     String   @default("light")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitation {
  id        String           @id @default(cuid())
  email     String?          @unique()
  token     String
  invitedBy String
  firstName String?
  lastName  String?
  phone     String?
  status    InvitationStatus @default(PENDING)
  role      Role             @default(USER)
  companyId String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([token])
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  action      String // e.g., "LOGIN", "CREATE_COMPANY", etc.
  tenantId    String? // ID of the entity being affected, if applicable
  description String? // More context about the action
  createdAt   DateTime @default(now())
  tenant      Company? @relation(fields: [tenantId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
